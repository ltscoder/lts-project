1排序算法
2迭代，递归
3搜索(深度广度)
4回溯
5贪心
6分治
  ~不一定是二分，斐波那契求和 递归 就是分治
  分治->使用递归
7动态规划

****************
贪心
贪心算法没有固定的算法框架，算法设计的关键是贪心策略的选择。必须注意的是，贪心算法不是对所有问题都能得到整体最优解，
选择的贪心策略必须具备无后效性（即某个状态以后的过程不会影响以前的状态，只与当前状态有关。)

贪心算法以迭代的方式作出相继的贪心选择，每作一次贪心选择就将所求问题简化为规模更小的子问题。
对于一个具体问题，要确定它是否具有贪心选择性质，必须证明每一步所作的贪心选择最终导致问题的整体最优解。
当一个问题的最优解包含其子问题的最优解时，称此问题具有最优子结构性质。
问题的最优子结构性质是该问题可用贪心算法求解的关键特征。

****************
分治
分治法所能解决的问题一般具有以下几个特征：
1) 该问题的规模缩小到一定的程度就可以容易地解决
2) 该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质。
3) 利用该问题分解出的子问题的解可以合并为该问题的解；
4) 该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子子问题。

分治法，将求解第n项划分为一个个小的子问题，通过对子问题解的合并，得出原问题的解，(~自顶向下)。结果的正确性毋庸置疑。
但是分治的过程时不记录子问题的解的，如果需要频繁的使用子问题的解，比如斐波那契求和用分治(分治->递归)，
子问题是互不干涉的，因此造成大量的重复计算，求解过程的性能令人堪忧
优化：带备忘录(~缓存)的。已经算过的就放到缓存中，就不用多次算了，~和动态规划复杂度差不多。

****************
动态规划：
动态规划类似分治，同样是将原问题分解成子问题，通过求解子问题而得到原问题的解。
但不同的是，动态规划是自底向上分解，并且会保存子问题的解，在需要时可直接拿过来使用，这一点是区别于分治的。
通过对子问题解的保存，可以避免大量重复计算，从而提高运行效率。

动规3个特性：
1重叠子问题：重叠子问题是一个递归解决方式里包括的子问题尽管非常多，但不同子问题非常少。少量的子问题被重复解决非常多次。
2最优子结构：即原问题的最优解包含了子问题的最优解，（贪心算法同样具备）
3状态转移方程：
子问题重复这个特性并不是动规的必要条件，但是子问题重复可以体现动规的优势
如何判断是否有重叠子问题，~根据状态转移方程，求上一个状态，是否有多种路径，需要多次计算同一个状态。
















